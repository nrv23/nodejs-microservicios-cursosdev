Si se usa el npm ci, instala las depedencias pero sin modificar el package.json
docker compose ps -- listar los contendores que estan asociados al compose 
docker compuse down -- elimina los contenedores y ret asociados al compose
docker compuse -d --build -- cargar el docker compose y forzar a crear nuevamente las imagenes
para instalar herramientas en un contenedor de docker, usar apk add 
intercambiador de tipo fanout se conecta a dos colas al mismo tiempo y los mensajes se cargan a las dos colas al mismo tiempo
las colas pueden tener varios consumidores y los mensajes se van enviando turno por consumidor
el intercambiador de tipo direct tiene un discriminador para filtrar los mensajes entrantes
si en el intercambiador de tipo fanout hay dos consumidores con el mismo routingkey, a ambos les llega el mensaje
por tener el mismo routingkey

el intercambiador de tipo topic es muy parecido al intercambiador de tipo fanout con la 
diferencia que tiene la opcion de enviar varios argumentos al routingKey.
El fanout tiene un routingkey donde envia solo a los que poseen ese routingkey

Partial es un tipo de interfaz generica que permite que el tipo de interfaz generica 
que se le pase tenga todas sus propiedades opcionales

Los dtos si pueden ser clases estatticas, pero adaptadores o servicios o providers deben ser 
inyecciones de dependencias

Patron corto circuito.

usa 3 estados OPEN, CLOSE y HALF-OPEN 
CLOSE: indica que se puede hacer la solicitud correctamente 
OPEN: Se cierra la conexion con el servicio
HALF-OPEN: Se abre por un tiempo mientras el servicio a consultar se reestablece, y se lleva un contador de solicitudes
enviadas para ver hasta cuantas que generen error cambien el estado a OPEN para devoelver un error por defecto

la logica siempre va ir en la capa de aplicacion.

Por ejemplo obtener informacion de varios microservicios y generar un reporte en otro microservicio.

La capa de infraestrcutura hace los llamados a los microservicios y la capa de aplicacion es la que
genera la logica.

path 

user :
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\01-user
auth: 
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\02-auth
appointment:
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\03-appoinment
appointment-pe 
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\04-appoinment-co
appoinment-pe
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\05-appointment-pe
appointment-mx
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\06-appointment-mx
helpdesk
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\07-help-desk
gateway
C:\Users\navem\OneDrive\Escritorio\cursos\nodejs-microservicios-cursosdev\05-appointment\08-api-gateway
revisar porque se estan enviando muchos mensajes confirmados en un solo llamado
Llevo el curso en la octava clase tiempo 50:42. Buscar los ejemplos de creacion de pods 
y archivos yml en el github del curso.

Cluster iP es un servicio que solo tiene acceso dentro del mismo cluster. Por eso se debe usar un port-forward
para poder conectarse a ese servicio 

